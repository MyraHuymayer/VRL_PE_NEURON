apply plugin: 'java'

sourceCompatibility = '1.6'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
        
task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'gcsc.vrl.pe_neuron.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
    
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

def loadProperties(String sourceFileName) {
    
    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)
    
    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
        filter({file->return !file.name.startsWith("vrl-0")}).
        files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)
}

// loads the property file
loadProperties('build.properties')

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) << {
    println(">> copying vrl plugin to: " + vrldir+"/plugin-updates")
    copy {
        from buildDir.getPath()+"/libs/"+rootProject.name + ".jar"
        into vrldir+"/plugin-updates"
        include '**/*.jar'
    }
}

dependencies {
    /// local deps
    compile fileTree(dir: PEdir + "/", includes:['*.jar']);
    
    /// maven deps
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.5-SNAPSHOT')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.5-SNAPSHOT', classifier: 'sources')
    compile (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.2.8.5-SNAPSHOT', classifier: 'javadoc')
    
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile group: 'colt', name: 'colt', version: '1.2.0'
    compile group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.4.7'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
    compile group: 'log4j', name: 'log4j', version: '1.2.14'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.2'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.50'
    compile group: 'com.github.vincentfk', name: 'joptimizer', version: '3.3.0'
    
    /// testing deps
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

